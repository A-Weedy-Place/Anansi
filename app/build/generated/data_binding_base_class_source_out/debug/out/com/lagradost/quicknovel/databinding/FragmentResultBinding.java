// Generated by view binder compiler. Do not edit!
package com.lagradost.quicknovel.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.ContentLoadingProgressBar;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.facebook.shimmer.ShimmerFrameLayout;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.tabs.TabLayout;
import com.lagradost.quicknovel.R;
import com.lagradost.quicknovel.widget.AutofitRecyclerView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentResultBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final RecyclerView chapterList;

  @NonNull
  public final ImageView downloadDeleteTrashFromResult;

  @NonNull
  public final TextView downloadWarning;

  @NonNull
  public final AutofitRecyclerView relatedList;

  @NonNull
  public final TextView resultAuthor;

  @NonNull
  public final ImageView resultBack;

  @NonNull
  public final ImageView resultBookmark;

  @NonNull
  public final FrameLayout resultChapterholder;

  @NonNull
  public final CoordinatorLayout resultContainer;

  @NonNull
  public final MaterialButton resultDownloadBtt;

  @NonNull
  public final FrameLayout resultDownloadCard;

  @NonNull
  public final MaterialButton resultDownloadGenerateEpub;

  @NonNull
  public final ContentLoadingProgressBar resultDownloadProgressBar;

  @NonNull
  public final TextView resultDownloadProgressText;

  @NonNull
  public final TextView resultDownloadProgressTextEta;

  @NonNull
  public final View resultEmptyView;

  @NonNull
  public final TextView resultErrorText;

  @NonNull
  public final FrameLayout resultHolder;

  @NonNull
  public final LinearLayout resultInfoHeader;

  @NonNull
  public final ShimmerFrameLayout resultLoading;

  @NonNull
  public final LinearLayout resultLoadingError;

  @NonNull
  public final NestedScrollView resultMainscroll;

  @NonNull
  public final LinearLayout resultNovelHolder;

  @NonNull
  public final ImageView resultOpeninbrower;

  @NonNull
  public final TextView resultOpeninbrowerText;

  @NonNull
  public final ImageView resultPoster;

  @NonNull
  public final ImageView resultPosterBlur;

  @NonNull
  public final MaterialButton resultQuickstream;

  @NonNull
  public final TextView resultRating;

  @NonNull
  public final TextView resultRatingVotedCount;

  @NonNull
  public final FrameLayout resultRelatedholder;

  @NonNull
  public final MaterialButton resultReloadConnectionOpenInBrowser;

  @NonNull
  public final MaterialButton resultReloadConnectionerror;

  @NonNull
  public final RecyclerView resultReviews;

  @NonNull
  public final FrameLayout resultReviewsholder;

  @NonNull
  public final LinearLayout resultScrollPadding;

  @NonNull
  public final ImageView resultShare;

  @NonNull
  public final TextView resultStatus;

  @NonNull
  public final TextView resultSynopsisText;

  @NonNull
  public final TabLayout resultTabs;

  @NonNull
  public final ChipGroup resultTag;

  @NonNull
  public final TextView resultTagHolder;

  @NonNull
  public final TextView resultTitle;

  @NonNull
  public final TextView resultTotalChapters;

  @NonNull
  public final TextView resultViews;

  @NonNull
  public final FrameLayout resultviewReviewsLoading;

  @NonNull
  public final ShimmerFrameLayout resultviewReviewsLoadingShimmer;

  @NonNull
  public final ExtendedFloatingActionButton reviewsFab;

  @NonNull
  public final CardView viewsAndRating;

  private FragmentResultBinding(@NonNull CoordinatorLayout rootView,
      @NonNull RecyclerView chapterList, @NonNull ImageView downloadDeleteTrashFromResult,
      @NonNull TextView downloadWarning, @NonNull AutofitRecyclerView relatedList,
      @NonNull TextView resultAuthor, @NonNull ImageView resultBack,
      @NonNull ImageView resultBookmark, @NonNull FrameLayout resultChapterholder,
      @NonNull CoordinatorLayout resultContainer, @NonNull MaterialButton resultDownloadBtt,
      @NonNull FrameLayout resultDownloadCard, @NonNull MaterialButton resultDownloadGenerateEpub,
      @NonNull ContentLoadingProgressBar resultDownloadProgressBar,
      @NonNull TextView resultDownloadProgressText, @NonNull TextView resultDownloadProgressTextEta,
      @NonNull View resultEmptyView, @NonNull TextView resultErrorText,
      @NonNull FrameLayout resultHolder, @NonNull LinearLayout resultInfoHeader,
      @NonNull ShimmerFrameLayout resultLoading, @NonNull LinearLayout resultLoadingError,
      @NonNull NestedScrollView resultMainscroll, @NonNull LinearLayout resultNovelHolder,
      @NonNull ImageView resultOpeninbrower, @NonNull TextView resultOpeninbrowerText,
      @NonNull ImageView resultPoster, @NonNull ImageView resultPosterBlur,
      @NonNull MaterialButton resultQuickstream, @NonNull TextView resultRating,
      @NonNull TextView resultRatingVotedCount, @NonNull FrameLayout resultRelatedholder,
      @NonNull MaterialButton resultReloadConnectionOpenInBrowser,
      @NonNull MaterialButton resultReloadConnectionerror, @NonNull RecyclerView resultReviews,
      @NonNull FrameLayout resultReviewsholder, @NonNull LinearLayout resultScrollPadding,
      @NonNull ImageView resultShare, @NonNull TextView resultStatus,
      @NonNull TextView resultSynopsisText, @NonNull TabLayout resultTabs,
      @NonNull ChipGroup resultTag, @NonNull TextView resultTagHolder,
      @NonNull TextView resultTitle, @NonNull TextView resultTotalChapters,
      @NonNull TextView resultViews, @NonNull FrameLayout resultviewReviewsLoading,
      @NonNull ShimmerFrameLayout resultviewReviewsLoadingShimmer,
      @NonNull ExtendedFloatingActionButton reviewsFab, @NonNull CardView viewsAndRating) {
    this.rootView = rootView;
    this.chapterList = chapterList;
    this.downloadDeleteTrashFromResult = downloadDeleteTrashFromResult;
    this.downloadWarning = downloadWarning;
    this.relatedList = relatedList;
    this.resultAuthor = resultAuthor;
    this.resultBack = resultBack;
    this.resultBookmark = resultBookmark;
    this.resultChapterholder = resultChapterholder;
    this.resultContainer = resultContainer;
    this.resultDownloadBtt = resultDownloadBtt;
    this.resultDownloadCard = resultDownloadCard;
    this.resultDownloadGenerateEpub = resultDownloadGenerateEpub;
    this.resultDownloadProgressBar = resultDownloadProgressBar;
    this.resultDownloadProgressText = resultDownloadProgressText;
    this.resultDownloadProgressTextEta = resultDownloadProgressTextEta;
    this.resultEmptyView = resultEmptyView;
    this.resultErrorText = resultErrorText;
    this.resultHolder = resultHolder;
    this.resultInfoHeader = resultInfoHeader;
    this.resultLoading = resultLoading;
    this.resultLoadingError = resultLoadingError;
    this.resultMainscroll = resultMainscroll;
    this.resultNovelHolder = resultNovelHolder;
    this.resultOpeninbrower = resultOpeninbrower;
    this.resultOpeninbrowerText = resultOpeninbrowerText;
    this.resultPoster = resultPoster;
    this.resultPosterBlur = resultPosterBlur;
    this.resultQuickstream = resultQuickstream;
    this.resultRating = resultRating;
    this.resultRatingVotedCount = resultRatingVotedCount;
    this.resultRelatedholder = resultRelatedholder;
    this.resultReloadConnectionOpenInBrowser = resultReloadConnectionOpenInBrowser;
    this.resultReloadConnectionerror = resultReloadConnectionerror;
    this.resultReviews = resultReviews;
    this.resultReviewsholder = resultReviewsholder;
    this.resultScrollPadding = resultScrollPadding;
    this.resultShare = resultShare;
    this.resultStatus = resultStatus;
    this.resultSynopsisText = resultSynopsisText;
    this.resultTabs = resultTabs;
    this.resultTag = resultTag;
    this.resultTagHolder = resultTagHolder;
    this.resultTitle = resultTitle;
    this.resultTotalChapters = resultTotalChapters;
    this.resultViews = resultViews;
    this.resultviewReviewsLoading = resultviewReviewsLoading;
    this.resultviewReviewsLoadingShimmer = resultviewReviewsLoadingShimmer;
    this.reviewsFab = reviewsFab;
    this.viewsAndRating = viewsAndRating;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentResultBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentResultBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_result, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentResultBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chapter_list;
      RecyclerView chapterList = ViewBindings.findChildViewById(rootView, id);
      if (chapterList == null) {
        break missingId;
      }

      id = R.id.download_delete_trash_from_result;
      ImageView downloadDeleteTrashFromResult = ViewBindings.findChildViewById(rootView, id);
      if (downloadDeleteTrashFromResult == null) {
        break missingId;
      }

      id = R.id.download_warning;
      TextView downloadWarning = ViewBindings.findChildViewById(rootView, id);
      if (downloadWarning == null) {
        break missingId;
      }

      id = R.id.related_list;
      AutofitRecyclerView relatedList = ViewBindings.findChildViewById(rootView, id);
      if (relatedList == null) {
        break missingId;
      }

      id = R.id.result_author;
      TextView resultAuthor = ViewBindings.findChildViewById(rootView, id);
      if (resultAuthor == null) {
        break missingId;
      }

      id = R.id.result_back;
      ImageView resultBack = ViewBindings.findChildViewById(rootView, id);
      if (resultBack == null) {
        break missingId;
      }

      id = R.id.result_bookmark;
      ImageView resultBookmark = ViewBindings.findChildViewById(rootView, id);
      if (resultBookmark == null) {
        break missingId;
      }

      id = R.id.result_chapterholder;
      FrameLayout resultChapterholder = ViewBindings.findChildViewById(rootView, id);
      if (resultChapterholder == null) {
        break missingId;
      }

      CoordinatorLayout resultContainer = (CoordinatorLayout) rootView;

      id = R.id.result_download_btt;
      MaterialButton resultDownloadBtt = ViewBindings.findChildViewById(rootView, id);
      if (resultDownloadBtt == null) {
        break missingId;
      }

      id = R.id.result_download_card;
      FrameLayout resultDownloadCard = ViewBindings.findChildViewById(rootView, id);
      if (resultDownloadCard == null) {
        break missingId;
      }

      id = R.id.result_download_generate_epub;
      MaterialButton resultDownloadGenerateEpub = ViewBindings.findChildViewById(rootView, id);
      if (resultDownloadGenerateEpub == null) {
        break missingId;
      }

      id = R.id.result_download_progress_bar;
      ContentLoadingProgressBar resultDownloadProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (resultDownloadProgressBar == null) {
        break missingId;
      }

      id = R.id.result_download_progress_text;
      TextView resultDownloadProgressText = ViewBindings.findChildViewById(rootView, id);
      if (resultDownloadProgressText == null) {
        break missingId;
      }

      id = R.id.result_download_progress_text_eta;
      TextView resultDownloadProgressTextEta = ViewBindings.findChildViewById(rootView, id);
      if (resultDownloadProgressTextEta == null) {
        break missingId;
      }

      id = R.id.result_empty_view;
      View resultEmptyView = ViewBindings.findChildViewById(rootView, id);
      if (resultEmptyView == null) {
        break missingId;
      }

      id = R.id.result_error_text;
      TextView resultErrorText = ViewBindings.findChildViewById(rootView, id);
      if (resultErrorText == null) {
        break missingId;
      }

      id = R.id.result_holder;
      FrameLayout resultHolder = ViewBindings.findChildViewById(rootView, id);
      if (resultHolder == null) {
        break missingId;
      }

      id = R.id.result_info_header;
      LinearLayout resultInfoHeader = ViewBindings.findChildViewById(rootView, id);
      if (resultInfoHeader == null) {
        break missingId;
      }

      id = R.id.result_loading;
      ShimmerFrameLayout resultLoading = ViewBindings.findChildViewById(rootView, id);
      if (resultLoading == null) {
        break missingId;
      }

      id = R.id.result_loading_error;
      LinearLayout resultLoadingError = ViewBindings.findChildViewById(rootView, id);
      if (resultLoadingError == null) {
        break missingId;
      }

      id = R.id.result_mainscroll;
      NestedScrollView resultMainscroll = ViewBindings.findChildViewById(rootView, id);
      if (resultMainscroll == null) {
        break missingId;
      }

      id = R.id.result_novel_holder;
      LinearLayout resultNovelHolder = ViewBindings.findChildViewById(rootView, id);
      if (resultNovelHolder == null) {
        break missingId;
      }

      id = R.id.result_openinbrower;
      ImageView resultOpeninbrower = ViewBindings.findChildViewById(rootView, id);
      if (resultOpeninbrower == null) {
        break missingId;
      }

      id = R.id.result_openinbrower_text;
      TextView resultOpeninbrowerText = ViewBindings.findChildViewById(rootView, id);
      if (resultOpeninbrowerText == null) {
        break missingId;
      }

      id = R.id.result_poster;
      ImageView resultPoster = ViewBindings.findChildViewById(rootView, id);
      if (resultPoster == null) {
        break missingId;
      }

      id = R.id.result_poster_blur;
      ImageView resultPosterBlur = ViewBindings.findChildViewById(rootView, id);
      if (resultPosterBlur == null) {
        break missingId;
      }

      id = R.id.result_quickstream;
      MaterialButton resultQuickstream = ViewBindings.findChildViewById(rootView, id);
      if (resultQuickstream == null) {
        break missingId;
      }

      id = R.id.result_rating;
      TextView resultRating = ViewBindings.findChildViewById(rootView, id);
      if (resultRating == null) {
        break missingId;
      }

      id = R.id.result_rating_voted_count;
      TextView resultRatingVotedCount = ViewBindings.findChildViewById(rootView, id);
      if (resultRatingVotedCount == null) {
        break missingId;
      }

      id = R.id.result_relatedholder;
      FrameLayout resultRelatedholder = ViewBindings.findChildViewById(rootView, id);
      if (resultRelatedholder == null) {
        break missingId;
      }

      id = R.id.result_reload_connection_open_in_browser;
      MaterialButton resultReloadConnectionOpenInBrowser = ViewBindings.findChildViewById(rootView, id);
      if (resultReloadConnectionOpenInBrowser == null) {
        break missingId;
      }

      id = R.id.result_reload_connectionerror;
      MaterialButton resultReloadConnectionerror = ViewBindings.findChildViewById(rootView, id);
      if (resultReloadConnectionerror == null) {
        break missingId;
      }

      id = R.id.result_reviews;
      RecyclerView resultReviews = ViewBindings.findChildViewById(rootView, id);
      if (resultReviews == null) {
        break missingId;
      }

      id = R.id.result_reviewsholder;
      FrameLayout resultReviewsholder = ViewBindings.findChildViewById(rootView, id);
      if (resultReviewsholder == null) {
        break missingId;
      }

      id = R.id.result_scroll_padding;
      LinearLayout resultScrollPadding = ViewBindings.findChildViewById(rootView, id);
      if (resultScrollPadding == null) {
        break missingId;
      }

      id = R.id.result_share;
      ImageView resultShare = ViewBindings.findChildViewById(rootView, id);
      if (resultShare == null) {
        break missingId;
      }

      id = R.id.result_status;
      TextView resultStatus = ViewBindings.findChildViewById(rootView, id);
      if (resultStatus == null) {
        break missingId;
      }

      id = R.id.result_synopsis_text;
      TextView resultSynopsisText = ViewBindings.findChildViewById(rootView, id);
      if (resultSynopsisText == null) {
        break missingId;
      }

      id = R.id.result_tabs;
      TabLayout resultTabs = ViewBindings.findChildViewById(rootView, id);
      if (resultTabs == null) {
        break missingId;
      }

      id = R.id.result_tag;
      ChipGroup resultTag = ViewBindings.findChildViewById(rootView, id);
      if (resultTag == null) {
        break missingId;
      }

      id = R.id.result_tag_holder;
      TextView resultTagHolder = ViewBindings.findChildViewById(rootView, id);
      if (resultTagHolder == null) {
        break missingId;
      }

      id = R.id.result_title;
      TextView resultTitle = ViewBindings.findChildViewById(rootView, id);
      if (resultTitle == null) {
        break missingId;
      }

      id = R.id.result_total_chapters;
      TextView resultTotalChapters = ViewBindings.findChildViewById(rootView, id);
      if (resultTotalChapters == null) {
        break missingId;
      }

      id = R.id.result_views;
      TextView resultViews = ViewBindings.findChildViewById(rootView, id);
      if (resultViews == null) {
        break missingId;
      }

      id = R.id.resultview_reviews_loading;
      FrameLayout resultviewReviewsLoading = ViewBindings.findChildViewById(rootView, id);
      if (resultviewReviewsLoading == null) {
        break missingId;
      }

      id = R.id.resultview_reviews_loading_shimmer;
      ShimmerFrameLayout resultviewReviewsLoadingShimmer = ViewBindings.findChildViewById(rootView, id);
      if (resultviewReviewsLoadingShimmer == null) {
        break missingId;
      }

      id = R.id.reviews_fab;
      ExtendedFloatingActionButton reviewsFab = ViewBindings.findChildViewById(rootView, id);
      if (reviewsFab == null) {
        break missingId;
      }

      id = R.id.views_and_rating;
      CardView viewsAndRating = ViewBindings.findChildViewById(rootView, id);
      if (viewsAndRating == null) {
        break missingId;
      }

      return new FragmentResultBinding((CoordinatorLayout) rootView, chapterList,
          downloadDeleteTrashFromResult, downloadWarning, relatedList, resultAuthor, resultBack,
          resultBookmark, resultChapterholder, resultContainer, resultDownloadBtt,
          resultDownloadCard, resultDownloadGenerateEpub, resultDownloadProgressBar,
          resultDownloadProgressText, resultDownloadProgressTextEta, resultEmptyView,
          resultErrorText, resultHolder, resultInfoHeader, resultLoading, resultLoadingError,
          resultMainscroll, resultNovelHolder, resultOpeninbrower, resultOpeninbrowerText,
          resultPoster, resultPosterBlur, resultQuickstream, resultRating, resultRatingVotedCount,
          resultRelatedholder, resultReloadConnectionOpenInBrowser, resultReloadConnectionerror,
          resultReviews, resultReviewsholder, resultScrollPadding, resultShare, resultStatus,
          resultSynopsisText, resultTabs, resultTag, resultTagHolder, resultTitle,
          resultTotalChapters, resultViews, resultviewReviewsLoading,
          resultviewReviewsLoadingShimmer, reviewsFab, viewsAndRating);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
